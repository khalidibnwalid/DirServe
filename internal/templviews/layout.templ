package templviews

templ Layout(title string, breadcrumbs []breadcrumb) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>{ title }</title>
			<!-- Using inline styles to avoid dependency on external files -->
			<style>
			:root {
				--primary-color: #474747;
				--secondary-color: #2c3e50;
				--muted-color: #3498db1a;
				--background-color: #f7f7f7;
				--card-background: #ffffff;
				--text-color: #333333;

                --border-radius: 20px;
                --transition-duration: 200ms;
			}

			* {
				margin: 0;
				padding: 0;
				box-sizing: border-box;
			}

			body {
				font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
				background-color: var(--background-color);
				color: var(--text-color);
				line-height: 1.6;
			}

			.container {
				max-width: 1200px;
				margin: 0 auto;
				padding: 20px;
			}

			.breadcrumb {
				margin: 20px 0;
				padding: 10px;
				display: flex;
				background-color: var(--card-color);
				border-radius: 4px;
				font-size: 30px;
			}

			.breadcrumb a {
				color: var(--primary-color);
				text-decoration: none;
				transition: var(--transition-duration);
			}

			.breadcrumb a:hover {
				color: var(--secondary-color);
			}

			.gallery {
				display: grid;
				grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
				gap: 20px;
			}

			.gallery-item {
				transition-duration: var(--transition-duration);
				background-color: var(--card-background);
				border-radius: var(--border-radius);
				overflow: hidden;
				box-sizing: border-box;
				/* Initial state for intersection observer animation */
				opacity: 0;
				transform: translateY(20px);
				/* So border won't resize the card */
				border: 1px solid var(--background-color);
			}

			.gallery-item-visible {
				opacity: 1;
				transform: translateY(0);
			}

			.gallery-item:hover {
				scale: 1.05;
				border: 1px solid var(--text-color);
			}

			.gallery-item a {
				text-decoration: none;
				color: var(--text-color);
			}

			.gallery-item img {
				width: 100%;
				height: 150px;
				object-fit: cover;
			}

			.gallery-item .folder-icon {
				width: 100%;
				height: 150px;
				display: flex;
				align-items: center;
				justify-content: center;
				font-size: 50px;
				color: var(--primary-color);
				background-color: var(--muted-color);
			}

			.gallery-item .file-icon {
				width: 100%;
				height: 150px;
				display: flex;
				align-items: center;
				justify-content: center;
				font-size: 50px;
				color: var(--secondary-color);
				background-color: var(--secondary-color);
			}

			.item-info {
				padding: 5px 12px 15px 12px;
			}

			.item-name {
				font-weight: bold;
				margin-bottom: 5px;
				overflow: hidden;
				text-overflow: ellipsis;
				white-space: nowrap;
			}

			.item-size {
				font-size: 0.8rem;
				color: #777;
			}

			.file-viewer {
				background-color: var(--card-background);
				border-radius: var(--border-radius);
				overflow: hidden;
				padding: 20px;
				display: flex;
				flex-direction: column;
				align-items: center;
				justify-content: center;
				row-gap: 20px;
			}

			.file-viewer img, .file-viewer video, .file-viewer audio {
				max-width: 100%;
				display: block;
				margin: 0 auto;
			}

			.file-actions {
				display: flex;
				gap: 10px;
			}

			.btn {
				padding: 8px 15px;
				background-color: var(--secondary-color);
				color: var(--background-color);
				border: none;
				border-radius: var(--border-radius);
				cursor: pointer;
				text-decoration: none;
				display: inline-block;
				font-size: 14px;
				color: var(--background-color);
				transition: var(--transition-duration);
			}

			.btn:hover {
				background-color: var(--primary-color);
			}

			/* Lightbox styles */
			.lightbox {
				display: none;
				position: fixed;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				background-color: rgba(0, 0, 0, 0.9);
				z-index: 1000;
				opacity: 0;
				transition: opacity 0.3s ease;
			}

			.lightbox.open {
				display: flex;
				opacity: 1;
				justify-content: center;
				align-items: center;
			}

			.lightbox-content {
				position: relative;
				width: 100%;
				height: 100%;
				display: flex;
				justify-content: center;
				align-items: center;
				text-align: center;
			}

			.lightbox-image {
				max-width: 100%;
				max-height: 100vh;
				width: auto;
				height: auto;
				object-fit: contain;
			}

			.lightbox-controls {
				position: absolute;
				bottom: 20px;
				left: 0;
				right: 0;
				display: flex;
				justify-content: center;
				gap: 20px;
				color: var(--background-color)
			}

			.lightbox-count {
				color: var(--background-color)
				font-size: 16px;
				background-color: rgba(0, 0, 0, 0.5);
				padding: 5px 10px;
				border-radius: 15px;
			}

			.lightbox-close {
				position: absolute;
				top: 20px;
				right: 20px;
				color: var(--background-color)
				font-size: 30px;
				cursor: pointer;
				z-index: 1010;
				width: 40px;
				height: 40px;
				display: flex;
				align-items: center;
				justify-content: center;
				background-color: rgba(0, 0, 0, 0.5);
				border-radius: 50%;
			}

			.lightbox-nav {
				position: absolute;
				top: 50%;
				width: 50px;
				height: 50px;
				transform: translateY(-50%);
				cursor: pointer;
				color: var(--background-color)
				font-size: 30px;
				display: flex;
				align-items: center;
				justify-content: center;
				background-color: rgba(0, 0, 0, 0.5);
				border-radius: 50%;
				z-index: 1010;
				transition: all 0.2s ease;
			}

			.lightbox-nav:hover {
				background-color: rgba(255, 255, 255, 0.2);
			}

			.lightbox-prev{
				left: 20px;
			}

			.lightbox-next {
				right: 20px;
			}

			@media (max-width: 768px) {
				.lightbox-prev,
				.lightbox-next {
					display: none !important;
				}

				.gallery {
					grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
				}
			}
				</style>
			<script defer>
                document.addEventListener('DOMContentLoaded', () => {
                    // Intersection Observer for lazy loading images
                    const observerOptions = {
                        root: null,
                        rootMargin: '0px',
                        threshold: 0.1
                    };

                    const observer = new IntersectionObserver((entries, observer) => {
                        entries.forEach(entry => {
                            if (entry.isIntersecting) {
                                entry.target.classList.add('gallery-item-visible');

                                const lazyImage = entry.target.querySelector('img[loading="lazy"]');
                                if (lazyImage && lazyImage.dataset.src) {
                                    lazyImage.src = lazyImage.dataset.src;
                                    // Remove the data-src attribute to avoid loading it again
                                    lazyImage.removeAttribute('data-src');
                                }

                            } else {
                                entry.target.classList.remove('gallery-item-visible');
                            }
                        });
                    }, observerOptions);

                    const galleryItems = document.querySelectorAll('.gallery-item');
                    galleryItems.forEach(item => observer.observe(item));
                    
                    // Lightbox
                    const lightbox = document.querySelector('.lightbox');
					const lightboxContent = document.querySelector('.lightbox-content');
                    const lightboxImage = document.querySelector('.lightbox-image');
                    const lightboxClose = document.querySelector('.lightbox-close');
                    const lightboxPrev = document.querySelector('.lightbox-prev');
                    const lightboxNext = document.querySelector('.lightbox-next');
                    const lightboxCount = document.querySelector('.lightbox-count');
                    
                    let currentIndex = 0;
                    let galleryImages = [];
                    
                    // Find all gallery images
                    function refreshGalleryImages() {
                        galleryImages = Array.from(document.querySelectorAll('.gallery-item a'))
                            .filter(item => item.querySelector('img'))
                            .map(item => ({
                                src: item.querySelector('img').src.replace('/raw/', '/raw/'),
                                alt: item.querySelector('img').alt,
                                element: item
                            }));
                    }
                      // Open lightbox with specific image
                    function openLightbox(index) {
                        if (galleryImages.length === 0) return;
                        
                        currentIndex = index;
                        lightboxImage.src = galleryImages[currentIndex].src;
                        lightboxImage.alt = galleryImages[currentIndex].alt;
                        lightboxCount.textContent = `${currentIndex + 1} / ${galleryImages.length}`;
                        
                        // Show or hide navigation based on number of images
                        if (galleryImages.length <= 1) {
                            lightboxPrev.style.display = 'none';
                            lightboxNext.style.display = 'none';
                        } else {
                            lightboxPrev.style.display = 'flex';
                            lightboxNext.style.display = 'flex';
                        }
                        
                        lightbox.classList.add('open');
                        document.body.style.overflow = 'hidden'; // Prevent scrolling
                    }
                    
                    function closeLightbox() {
                        lightbox.classList.remove('open');
                        document.body.style.overflow = ''; // Re-enable scrolling
                    }
                    
                    function prevImage() {
                        currentIndex = (currentIndex - 1 + galleryImages.length) % galleryImages.length;
                        lightboxImage.src = galleryImages[currentIndex].src;
                        lightboxImage.alt = galleryImages[currentIndex].alt;
                        lightboxCount.textContent = `${currentIndex + 1} / ${galleryImages.length}`;
                    }
                    
                    function nextImage() {
                        currentIndex = (currentIndex + 1) % galleryImages.length;
                        lightboxImage.src = galleryImages[currentIndex].src;
                        lightboxImage.alt = galleryImages[currentIndex].alt;
                        lightboxCount.textContent = `${currentIndex + 1} / ${galleryImages.length}`;
                    }

                      // event delegation for gallery image clicks
                    document.addEventListener('click', (e) => {
                        // Find if click is on gallery image or its ancestor
                        const galleryItemLink = e.target.closest('.gallery-item a');
                        if (galleryItemLink && galleryItemLink.querySelector('img')) {
                            e.preventDefault();
                            
                            refreshGalleryImages();
                            const clickedIndex = galleryImages.findIndex(item => item.element === galleryItemLink);
                            
                            if (clickedIndex !== -1) {
                                openLightbox(clickedIndex);
                            }
                        }
                        
                        // Handle single image viewer
                        const singleImage = e.target.closest('.lightbox-enabled');
                        if (singleImage) {
                            e.preventDefault();
                            
                            // Create a temporary array with just this image
                            galleryImages = [{
                                src: singleImage.src,
                                alt: singleImage.alt,
                                element: singleImage
                            }];
                            
                            openLightbox(0);
                            
                            // Hide navigation if only one image
                            if (galleryImages.length <= 1) {
                                lightboxPrev.style.display = 'none';
                                lightboxNext.style.display = 'none';
                            } else {
                                lightboxPrev.style.display = 'flex';
                                lightboxNext.style.display = 'flex';
                            }
                        }
                    });
                    
                    // Event listeners for lightbox controls
						// Close lightbox if clicked outside the image
					lightbox.addEventListener('click', (e) => {
						if (e.target === lightboxContent || e.target === lightboxClose) {
							closeLightbox();
						}
					});
                    lightboxPrev.addEventListener('click', prevImage);
                    lightboxNext.addEventListener('click', nextImage);
                    
                    // Keyboard navigation
                    document.addEventListener('keydown', (e) => {
                        if (!lightbox.classList.contains('open')) return;
                        
                        if (e.key === 'Escape') closeLightbox();
                        if (e.key === 'ArrowLeft') prevImage();
                        if (e.key === 'ArrowRight') nextImage();
                    });
                    
                    // Swipe events for touch devices
                    let touchStartX = 0;
                    let touchEndX = 0;
                    
                    function handleSwipe() {
                        if (touchEndX < touchStartX - 50) {
                            // Swipe left, go to next image
                            nextImage();
                        } else if (touchEndX > touchStartX + 50) {
                            // Swipe right, go to previous image
                            prevImage();
                        }
                    }
                    
                    lightbox.addEventListener('touchstart', (e) => {
                        touchStartX = e.changedTouches[0].screenX;
                    });
                    
                    lightbox.addEventListener('touchend', (e) => {
                        touchEndX = e.changedTouches[0].screenX;
                        handleSwipe();
                    });
                });
        </script>
		</head>
		<body>
			<main class="container">
				<!-- Breadcrumb navigation -->
				<h1 class="breadcrumb">
					for i, crumb := range breadcrumbs {
						if i == len(breadcrumbs)-1 {
							<span>{ crumb.Name }</span>
						} else {
							<a href={ templ.SafeURL("/web/" + crumb.Path) }>{ crumb.Name }&nbsp;/&nbsp;</a>
						}
					}
				</h1>
				{ children... }
			</main>
			<!-- Lightbox container -->
			<div class="lightbox">
				<div class="lightbox-close">✕</div>
				<div class="lightbox-nav lightbox-prev">❮</div>
				<div class="lightbox-nav lightbox-next">❯</div>
				<div class="lightbox-content">
					<img class="lightbox-image" src="" alt=""/>
					<div class="lightbox-controls">
						<div class="lightbox-count">1 / ...</div>
					</div>
				</div>
			</div>
		</body>
	</html>
}
