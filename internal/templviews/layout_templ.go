// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.898
package templviews

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Layout(title string, breadcrumbs []breadcrumb) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templviews/layout.templ`, Line: 9, Col: 17}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</title><!-- Using inline styles to avoid dependency on external files --><style>\r\n\t\t\t:root {\r\n\t\t\t\t--primary-color: #474747;\r\n\t\t\t\t--secondary-color: #2c3e50;\r\n\t\t\t\t--muted-color: #3498db1a;\r\n\t\t\t\t--background-color: #f7f7f7;\r\n\t\t\t\t--card-background: #ffffff;\r\n\t\t\t\t--text-color: #333333;\r\n\r\n                --border-radius: 20px;\r\n                --transition-duration: 200ms;\r\n\t\t\t}\r\n\r\n\t\t\t* {\r\n\t\t\t\tmargin: 0;\r\n\t\t\t\tpadding: 0;\r\n\t\t\t\tbox-sizing: border-box;\r\n\t\t\t}\r\n\r\n\t\t\tbody {\r\n\t\t\t\tfont-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n\t\t\t\tbackground-color: var(--background-color);\r\n\t\t\t\tcolor: var(--text-color);\r\n\t\t\t\tline-height: 1.6;\r\n\t\t\t}\r\n\r\n\t\t\t.container {\r\n\t\t\t\tmax-width: 1200px;\r\n\t\t\t\tmargin: 0 auto;\r\n\t\t\t\tpadding: 20px;\r\n\t\t\t}\r\n\r\n\t\t\t.breadcrumb {\r\n\t\t\t\tmargin: 20px 0;\r\n\t\t\t\tpadding: 10px;\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tbackground-color: var(--card-color);\r\n\t\t\t\tborder-radius: 4px;\r\n\t\t\t\tfont-size: 30px;\r\n\t\t\t}\r\n\r\n\t\t\t.breadcrumb a {\r\n\t\t\t\tcolor: var(--primary-color);\r\n\t\t\t\ttext-decoration: none;\r\n\t\t\t\ttransition: var(--transition-duration);\r\n\t\t\t}\r\n\r\n\t\t\t.breadcrumb a:hover {\r\n\t\t\t\tcolor: var(--secondary-color);\r\n\t\t\t}\r\n\r\n\t\t\t.gallery {\r\n\t\t\t\tdisplay: grid;\r\n\t\t\t\tgrid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n\t\t\t\tgap: 20px;\r\n\t\t\t}\r\n\r\n\t\t\t.gallery-item {\r\n\t\t\t\ttransition-duration: var(--transition-duration);\r\n\t\t\t\tbackground-color: var(--card-background);\r\n\t\t\t\tborder-radius: var(--border-radius);\r\n\t\t\t\toverflow: hidden;\r\n\t\t\t\tbox-sizing: border-box;\r\n\t\t\t\t/* Initial state for intersection observer animation */\r\n\t\t\t\topacity: 0;\r\n\t\t\t\ttransform: translateY(20px);\r\n\t\t\t\t/* So border won't resize the card */\r\n\t\t\t\tborder: 1px solid var(--background-color);\r\n\t\t\t}\r\n\r\n\t\t\t.gallery-item-visible {\r\n\t\t\t\topacity: 1;\r\n\t\t\t\ttransform: translateY(0);\r\n\t\t\t}\r\n\r\n\t\t\t.gallery-item:hover {\r\n\t\t\t\tscale: 1.05;\r\n\t\t\t\tborder: 1px solid var(--text-color);\r\n\t\t\t}\r\n\r\n\t\t\t.gallery-item a {\r\n\t\t\t\ttext-decoration: none;\r\n\t\t\t\tcolor: var(--text-color);\r\n\t\t\t}\r\n\r\n\t\t\t.gallery-item img {\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\theight: 150px;\r\n\t\t\t\tobject-fit: cover;\r\n\t\t\t}\r\n\r\n\t\t\t.gallery-item .folder-icon {\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\theight: 150px;\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\talign-items: center;\r\n\t\t\t\tjustify-content: center;\r\n\t\t\t\tfont-size: 50px;\r\n\t\t\t\tcolor: var(--primary-color);\r\n\t\t\t\tbackground-color: var(--muted-color);\r\n\t\t\t}\r\n\r\n\t\t\t.gallery-item .file-icon {\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\theight: 150px;\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\talign-items: center;\r\n\t\t\t\tjustify-content: center;\r\n\t\t\t\tfont-size: 50px;\r\n\t\t\t\tcolor: var(--secondary-color);\r\n\t\t\t\tbackground-color: var(--secondary-color);\r\n\t\t\t}\r\n\r\n\t\t\t.item-info {\r\n\t\t\t\tpadding: 5px 12px 15px 12px;\r\n\t\t\t}\r\n\r\n\t\t\t.item-name {\r\n\t\t\t\tfont-weight: bold;\r\n\t\t\t\tmargin-bottom: 5px;\r\n\t\t\t\toverflow: hidden;\r\n\t\t\t\ttext-overflow: ellipsis;\r\n\t\t\t\twhite-space: nowrap;\r\n\t\t\t}\r\n\r\n\t\t\t.item-size {\r\n\t\t\t\tfont-size: 0.8rem;\r\n\t\t\t\tcolor: #777;\r\n\t\t\t}\r\n\r\n\t\t\t.file-viewer {\r\n\t\t\t\tbackground-color: var(--card-background);\r\n\t\t\t\tborder-radius: var(--border-radius);\r\n\t\t\t\toverflow: hidden;\r\n\t\t\t\tpadding: 20px;\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tflex-direction: column;\r\n\t\t\t\talign-items: center;\r\n\t\t\t\tjustify-content: center;\r\n\t\t\t\trow-gap: 20px;\r\n\t\t\t}\r\n\r\n\t\t\t.file-viewer img, .file-viewer video, .file-viewer audio {\r\n\t\t\t\tmax-width: 100%;\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tmargin: 0 auto;\r\n\t\t\t}\r\n\r\n\t\t\t.file-actions {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tgap: 10px;\r\n\t\t\t}\r\n\r\n\t\t\t.btn {\r\n\t\t\t\tpadding: 8px 15px;\r\n\t\t\t\tbackground-color: var(--secondary-color);\r\n\t\t\t\tcolor: var(--background-color);\r\n\t\t\t\tborder: none;\r\n\t\t\t\tborder-radius: var(--border-radius);\r\n\t\t\t\tcursor: pointer;\r\n\t\t\t\ttext-decoration: none;\r\n\t\t\t\tdisplay: inline-block;\r\n\t\t\t\tfont-size: 14px;\r\n\t\t\t\tcolor: var(--background-color);\r\n\t\t\t\ttransition: var(--transition-duration);\r\n\t\t\t}\r\n\r\n\t\t\t.btn:hover {\r\n\t\t\t\tbackground-color: var(--primary-color);\r\n\t\t\t}\r\n\r\n\t\t\t/* Lightbox styles */\r\n\t\t\t.lightbox {\r\n\t\t\t\tdisplay: none;\r\n\t\t\t\tposition: fixed;\r\n\t\t\t\ttop: 0;\r\n\t\t\t\tleft: 0;\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\theight: 100%;\r\n\t\t\t\tbackground-color: rgba(0, 0, 0, 0.9);\r\n\t\t\t\tz-index: 1000;\r\n\t\t\t\topacity: 0;\r\n\t\t\t\ttransition: opacity 0.3s ease;\r\n\t\t\t}\r\n\r\n\t\t\t.lightbox.open {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\topacity: 1;\r\n\t\t\t\tjustify-content: center;\r\n\t\t\t\talign-items: center;\r\n\t\t\t}\r\n\r\n\t\t\t.lightbox-content {\r\n\t\t\t\tposition: relative;\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\theight: 100%;\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tjustify-content: center;\r\n\t\t\t\talign-items: center;\r\n\t\t\t\ttext-align: center;\r\n\t\t\t}\r\n\r\n\t\t\t.lightbox-image {\r\n\t\t\t\tmax-width: 100%;\r\n\t\t\t\tmax-height: 100vh;\r\n\t\t\t\twidth: auto;\r\n\t\t\t\theight: auto;\r\n\t\t\t\tobject-fit: contain;\r\n\t\t\t}\r\n\r\n\t\t\t.lightbox-controls {\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\tbottom: 20px;\r\n\t\t\t\tleft: 0;\r\n\t\t\t\tright: 0;\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tjustify-content: center;\r\n\t\t\t\tgap: 20px;\r\n\t\t\t\tcolor: var(--background-color)\r\n\t\t\t}\r\n\r\n\t\t\t.lightbox-count {\r\n\t\t\t\tcolor: var(--background-color)\r\n\t\t\t\tfont-size: 16px;\r\n\t\t\t\tbackground-color: rgba(0, 0, 0, 0.5);\r\n\t\t\t\tpadding: 5px 10px;\r\n\t\t\t\tborder-radius: 15px;\r\n\t\t\t}\r\n\r\n\t\t\t.lightbox-close {\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\ttop: 20px;\r\n\t\t\t\tright: 20px;\r\n\t\t\t\tcolor: var(--background-color)\r\n\t\t\t\tfont-size: 30px;\r\n\t\t\t\tcursor: pointer;\r\n\t\t\t\tz-index: 1010;\r\n\t\t\t\twidth: 40px;\r\n\t\t\t\theight: 40px;\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\talign-items: center;\r\n\t\t\t\tjustify-content: center;\r\n\t\t\t\tbackground-color: rgba(0, 0, 0, 0.5);\r\n\t\t\t\tborder-radius: 50%;\r\n\t\t\t}\r\n\r\n\t\t\t.lightbox-nav {\r\n\t\t\t\tposition: absolute;\r\n\t\t\t\ttop: 50%;\r\n\t\t\t\twidth: 50px;\r\n\t\t\t\theight: 50px;\r\n\t\t\t\ttransform: translateY(-50%);\r\n\t\t\t\tcursor: pointer;\r\n\t\t\t\tcolor: var(--background-color)\r\n\t\t\t\tfont-size: 30px;\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\talign-items: center;\r\n\t\t\t\tjustify-content: center;\r\n\t\t\t\tbackground-color: rgba(0, 0, 0, 0.5);\r\n\t\t\t\tborder-radius: 50%;\r\n\t\t\t\tz-index: 1010;\r\n\t\t\t\ttransition: all 0.2s ease;\r\n\t\t\t}\r\n\r\n\t\t\t.lightbox-nav:hover {\r\n\t\t\t\tbackground-color: rgba(255, 255, 255, 0.2);\r\n\t\t\t}\r\n\r\n\t\t\t.lightbox-prev{\r\n\t\t\t\tleft: 20px;\r\n\t\t\t}\r\n\r\n\t\t\t.lightbox-next {\r\n\t\t\t\tright: 20px;\r\n\t\t\t}\r\n\r\n\t\t\t@media (max-width: 768px) {\r\n\t\t\t\t.lightbox-prev,\r\n\t\t\t\t.lightbox-next {\r\n\t\t\t\t\tdisplay: none !important;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.gallery {\r\n\t\t\t\t\tgrid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\t</style><script defer>\r\n                document.addEventListener('DOMContentLoaded', () => {\r\n                    // Intersection Observer for lazy loading images\r\n                    const observerOptions = {\r\n                        root: null,\r\n                        rootMargin: '0px',\r\n                        threshold: 0.1\r\n                    };\r\n\r\n                    const observer = new IntersectionObserver((entries, observer) => {\r\n                        entries.forEach(entry => {\r\n                            if (entry.isIntersecting) {\r\n                                entry.target.classList.add('gallery-item-visible');\r\n\r\n                                const lazyImage = entry.target.querySelector('img[loading=\"lazy\"]');\r\n                                if (lazyImage && lazyImage.dataset.src) {\r\n                                    lazyImage.src = lazyImage.dataset.src;\r\n                                    // Remove the data-src attribute to avoid loading it again\r\n                                    lazyImage.removeAttribute('data-src');\r\n                                }\r\n\r\n                            } else {\r\n                                entry.target.classList.remove('gallery-item-visible');\r\n                            }\r\n                        });\r\n                    }, observerOptions);\r\n\r\n                    const galleryItems = document.querySelectorAll('.gallery-item');\r\n                    galleryItems.forEach(item => observer.observe(item));\r\n                    \r\n                    // Lightbox\r\n                    const lightbox = document.querySelector('.lightbox');\r\n\t\t\t\t\tconst lightboxContent = document.querySelector('.lightbox-content');\r\n                    const lightboxImage = document.querySelector('.lightbox-image');\r\n                    const lightboxClose = document.querySelector('.lightbox-close');\r\n                    const lightboxPrev = document.querySelector('.lightbox-prev');\r\n                    const lightboxNext = document.querySelector('.lightbox-next');\r\n                    const lightboxCount = document.querySelector('.lightbox-count');\r\n                    \r\n                    let currentIndex = 0;\r\n                    let galleryImages = [];\r\n                    \r\n                    // Find all gallery images\r\n                    function refreshGalleryImages() {\r\n                        galleryImages = Array.from(document.querySelectorAll('.gallery-item a'))\r\n                            .filter(item => item.querySelector('img'))\r\n                            .map(item => ({\r\n                                src: item.querySelector('img').src.replace('/raw/', '/raw/'),\r\n                                alt: item.querySelector('img').alt,\r\n                                element: item\r\n                            }));\r\n                    }\r\n                      // Open lightbox with specific image\r\n                    function openLightbox(index) {\r\n                        if (galleryImages.length === 0) return;\r\n                        \r\n                        currentIndex = index;\r\n                        lightboxImage.src = galleryImages[currentIndex].src;\r\n                        lightboxImage.alt = galleryImages[currentIndex].alt;\r\n                        lightboxCount.textContent = `${currentIndex + 1} / ${galleryImages.length}`;\r\n                        \r\n                        // Show or hide navigation based on number of images\r\n                        if (galleryImages.length <= 1) {\r\n                            lightboxPrev.style.display = 'none';\r\n                            lightboxNext.style.display = 'none';\r\n                        } else {\r\n                            lightboxPrev.style.display = 'flex';\r\n                            lightboxNext.style.display = 'flex';\r\n                        }\r\n                        \r\n                        lightbox.classList.add('open');\r\n                        document.body.style.overflow = 'hidden'; // Prevent scrolling\r\n                    }\r\n                    \r\n                    function closeLightbox() {\r\n                        lightbox.classList.remove('open');\r\n                        document.body.style.overflow = ''; // Re-enable scrolling\r\n                    }\r\n                    \r\n                    function prevImage() {\r\n                        currentIndex = (currentIndex - 1 + galleryImages.length) % galleryImages.length;\r\n                        lightboxImage.src = galleryImages[currentIndex].src;\r\n                        lightboxImage.alt = galleryImages[currentIndex].alt;\r\n                        lightboxCount.textContent = `${currentIndex + 1} / ${galleryImages.length}`;\r\n                    }\r\n                    \r\n                    function nextImage() {\r\n                        currentIndex = (currentIndex + 1) % galleryImages.length;\r\n                        lightboxImage.src = galleryImages[currentIndex].src;\r\n                        lightboxImage.alt = galleryImages[currentIndex].alt;\r\n                        lightboxCount.textContent = `${currentIndex + 1} / ${galleryImages.length}`;\r\n                    }\r\n\r\n                      // event delegation for gallery image clicks\r\n                    document.addEventListener('click', (e) => {\r\n                        // Find if click is on gallery image or its ancestor\r\n                        const galleryItemLink = e.target.closest('.gallery-item a');\r\n                        if (galleryItemLink && galleryItemLink.querySelector('img')) {\r\n                            e.preventDefault();\r\n                            \r\n                            refreshGalleryImages();\r\n                            const clickedIndex = galleryImages.findIndex(item => item.element === galleryItemLink);\r\n                            \r\n                            if (clickedIndex !== -1) {\r\n                                openLightbox(clickedIndex);\r\n                            }\r\n                        }\r\n                        \r\n                        // Handle single image viewer\r\n                        const singleImage = e.target.closest('.lightbox-enabled');\r\n                        if (singleImage) {\r\n                            e.preventDefault();\r\n                            \r\n                            // Create a temporary array with just this image\r\n                            galleryImages = [{\r\n                                src: singleImage.src,\r\n                                alt: singleImage.alt,\r\n                                element: singleImage\r\n                            }];\r\n                            \r\n                            openLightbox(0);\r\n                            \r\n                            // Hide navigation if only one image\r\n                            if (galleryImages.length <= 1) {\r\n                                lightboxPrev.style.display = 'none';\r\n                                lightboxNext.style.display = 'none';\r\n                            } else {\r\n                                lightboxPrev.style.display = 'flex';\r\n                                lightboxNext.style.display = 'flex';\r\n                            }\r\n                        }\r\n                    });\r\n                    \r\n                    // Event listeners for lightbox controls\r\n\t\t\t\t\t\t// Close lightbox if clicked outside the image\r\n\t\t\t\t\tlightbox.addEventListener('click', (e) => {\r\n\t\t\t\t\t\tif (e.target === lightboxContent || e.target === lightboxClose) {\r\n\t\t\t\t\t\t\tcloseLightbox();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n                    lightboxPrev.addEventListener('click', prevImage);\r\n                    lightboxNext.addEventListener('click', nextImage);\r\n                    \r\n                    // Keyboard navigation\r\n                    document.addEventListener('keydown', (e) => {\r\n                        if (!lightbox.classList.contains('open')) return;\r\n                        \r\n                        if (e.key === 'Escape') closeLightbox();\r\n                        if (e.key === 'ArrowLeft') prevImage();\r\n                        if (e.key === 'ArrowRight') nextImage();\r\n                    });\r\n                    \r\n                    // Swipe events for touch devices\r\n                    let touchStartX = 0;\r\n                    let touchEndX = 0;\r\n                    \r\n                    function handleSwipe() {\r\n                        if (touchEndX < touchStartX - 50) {\r\n                            // Swipe left, go to next image\r\n                            nextImage();\r\n                        } else if (touchEndX > touchStartX + 50) {\r\n                            // Swipe right, go to previous image\r\n                            prevImage();\r\n                        }\r\n                    }\r\n                    \r\n                    lightbox.addEventListener('touchstart', (e) => {\r\n                        touchStartX = e.changedTouches[0].screenX;\r\n                    });\r\n                    \r\n                    lightbox.addEventListener('touchend', (e) => {\r\n                        touchEndX = e.changedTouches[0].screenX;\r\n                        handleSwipe();\r\n                    });\r\n                });\r\n        </script></head><body><main class=\"container\"><!-- Breadcrumb navigation --><h1 class=\"breadcrumb\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for i, crumb := range breadcrumbs {
			if i == len(breadcrumbs)-1 {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<span>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var3 string
				templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(crumb.Name)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templviews/layout.templ`, Line: 481, Col: 25}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</span>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			} else {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<a href=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var4 templ.SafeURL
				templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinURLErrs(templ.SafeURL("/web/" + crumb.Path))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templviews/layout.templ`, Line: 483, Col: 52}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var5 string
				templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(crumb.Name)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templviews/layout.templ`, Line: 483, Col: 67}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "&nbsp;/&nbsp;</a>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "</h1>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</main><!-- Lightbox container --><div class=\"lightbox\"><div class=\"lightbox-close\">✕</div><div class=\"lightbox-nav lightbox-prev\">❮</div><div class=\"lightbox-nav lightbox-next\">❯</div><div class=\"lightbox-content\"><img class=\"lightbox-image\" src=\"\" alt=\"\"><div class=\"lightbox-controls\"><div class=\"lightbox-count\">1 / ...</div></div></div></div></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
